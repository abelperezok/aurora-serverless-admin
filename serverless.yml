service: aurora-serverless-admin

provider:
  name: aws
  runtime: dotnetcore2.1
  stage: dev
  region: eu-west-1
  timeout: 30

package:
  artifact: bin/release/netcoreapp2.1/deploy-package.zip

functions:
  ExecuteReader:
    handler: AuroraAdminLambda::AuroraAdmin.Function::ExecuteReaderHandler
    vpc:
      securityGroupIds:
        - !Ref DbClusterSg
      subnetIds: !Ref SubnetIds
    events:
     - http:
        path: execute-reader
        method: POST
        integration: lambda
        request:
          template:
            application/json: |
              {
                "Connection": {
                  "DbUser": $input.json('$.user'),
                  "DbPassword": $input.json('$.pwd'),
                  "DbName": $input.json('$.db'),
                  "DbHost": $input.json('$.host'),
                  "DbPort": $input.json('$.port')
                },
                "QueryText": $input.json('$.query')
              }
        response:
          headers:
            Content-Type: "'application/json'"
          statusCodes:
            200:
              pattern: ''
              template:
                application/json: |
                  #set ($root=$input.path('$'))
                  {
                    "Results": $root,
                    "Error": ""
                  }
            500:
              pattern: '.+'
              template:
                application/json: |
                  #set ($root=$input.path('$'))
                  {
                    "Results": [],
                    "Error": "$root.errorMessage"
                  }

  ExecuteNonQuery:
    handler: AuroraAdminLambda::AuroraAdmin.Function::ExecuteNonQueryHandler
    vpc:
      securityGroupIds:
        - !Ref DbClusterSg
      subnetIds: !Ref SubnetIds
    events:
     - http:
        path: execute-non-query
        method: POST
        integration: lambda
        request:
          template:
            application/json: |
              {
                "Connection": {
                  "DbUser": $input.json('$.user'),
                  "DbPassword": $input.json('$.pwd'),
                  "DbName": $input.json('$.db'),
                  "DbHost": $input.json('$.host'),
                  "DbPort": $input.json('$.port')
                },
                "QueryText": $input.json('$.query')
              }
        response:
          headers:
            Content-Type: "'application/json'"
          statusCodes:
            200:
              pattern: ''
              template:
                application/json: |
                  {
                    "AffectedRows": $input.path('$')
                  }
            500:
              pattern: '.+'
              template:
                application/json: |
                  {
                    "Results": [],
                    "Error": "$input.path('$.errorMessage')"
                  }

# CloudFormation resources
resources:
  Parameters: 
    DbClusterDatabaseName: 
      Type: String
      Default: ${opt:opt-db-name}
    DbClusterIdentifier: 
      Type: String
      Default: ${opt:opt-db-cluster-id}
    DbClusterParameterGroup: 
      Type: String
      Default: default.aurora5.6
    DbClusterMasterUsername: 
      Type: String
      Default: ${opt:opt-db-user}
    DbClusterMasterPassword: 
      Type: String
      Default: ${opt:opt-db-pwd}
    DbClusterPort: 
      Type: Number
      Default: ${opt:opt-db-port, '3306'}
    VpcId: 
      Type: String
      Default: ${opt:opt-vpc-id}
    SubnetIds: 
      Type: CommaDelimitedList
      Default: ${opt:opt-subnet-ids}

  Resources:
    DbClusterSg:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow MySQL port to client host
        VpcId:
          Ref: VpcId
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: !Ref DbClusterPort
            ToPort: !Ref DbClusterPort
            CidrIp: 0.0.0.0/0

    DbSubnetGroup: 
      Type: "AWS::RDS::DBSubnetGroup"
      Properties: 
        DBSubnetGroupDescription: "private subnets"
        SubnetIds: !Ref SubnetIds

    AuroraMysqlCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        DatabaseName:
          Ref: DbClusterDatabaseName
        DBClusterParameterGroupName:
          Ref: DbClusterParameterGroup
        DBSubnetGroupName:
          Ref: DbSubnetGroup
        Engine: aurora
        EngineMode: serverless
        MasterUsername:
          Ref: DbClusterMasterUsername
        MasterUserPassword:
          Ref: DbClusterMasterPassword
        ScalingConfiguration:
          AutoPause: true
          MinCapacity: 2
          MaxCapacity: 4
          SecondsUntilAutoPause: 1800
        VpcSecurityGroupIds:
          - !Ref DbClusterSg

  # Outputs:
  #   DbClusterEndpointAddress:
  #     Value: !GetAtt AuroraMysqlCluster.Endpoint.Address
  #   DbClusterEndpointPort:
  #     Value: !GetAtt AuroraMysqlCluster.Endpoint.Port


